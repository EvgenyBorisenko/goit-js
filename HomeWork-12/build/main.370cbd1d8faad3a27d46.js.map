{"version":3,"sources":["webpack:///./fetchWeather.js","webpack:///./index.js","webpack:///./getGeoPosition.js"],"names":["url","fetchWeather","coords","fetch","then","response","json","render","data","document","querySelector","textContent","current","condition","text","icon","wind_kph","location","name","temp_c","humidity","getElementById","addEventListener","e","preventDefault","console","log","currentTarget","elements","city","value","position","navigator","geolocation","Promise","res","rej","getCurrentPosition","serchForm","innerHTML","showPosition","latitude","longitude"],"mappings":"qKACMA,EAAK,2EAEI,SAASC,EAAaC,GACnC,OAAOC,MAASH,EAAJ,MAAaE,GACtBE,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SCqB/B,SAASC,EAAOC,GACdC,SAASC,cAAc,6BAA6BC,YAAcH,EAAKI,QAAQC,UAAUC,KACzFL,SAASC,cAAc,SAASC,YAAcH,EAAKI,QAAQC,UAAUE,KACrEN,SAASC,cAAc,uBAAuBC,YAAiBH,EAAKI,QAAQI,SAA5E,MACAP,SAASC,cAAc,2BAA2BC,YAAcH,EAAKS,SAASC,KAC9ET,SAASC,cAAc,uBAAuBC,YAAiBH,EAAKI,QAAQO,OAA5E,KACAV,SAASC,cAAc,2BAA2BC,YAAiBH,EAAKI,QAAQQ,SAAhF,IA3BgBX,SAASY,eAAe,eAChCC,iBAAiB,SAAU,SAAAC,GACnCA,EAAEC,iBACFC,QAAQC,IAAI,wCAAyCH,EAAEI,cAAcC,SAASC,KAAKC,OACnF7B,EAAasB,EAAEI,cAAcC,SAASC,KAAKC,OAC1C1B,KAAK,SAAAI,GACJiB,QAAQC,IAAI,QAASlB,GACrBD,EAAOC,OCDX,SAAsBuB,GACpB,GAAIC,UAAUC,YACZ,OAAO,IAAIC,QAAQ,SAACC,EAAKC,GAEvBJ,UAAUC,YAAYI,mBAAmBF,EAAKC,EAD9B,MAIlBE,UAAUC,UAAY,gDAdjBC,GAAepC,KAAK,SAAC2B,GAE1B,OADgBA,EAAS7B,OAAOuC,SAAtB,IAAkCV,EAAS7B,OAAOwC,YDY/CtC,KAAK,SAAAI,GACpBiB,QAAQC,IAAI,OAAQlB,GACpBP,EAAaO,GACZJ,KAAK,SAAAI,GACJiB,QAAQC,IAAI,QAASlB,GACrBD,EAAOC","file":"main.370cbd1d8faad3a27d46.js","sourcesContent":["\r\nconst url ='https://api.apixu.com/v1/current.json?key=96ccab11fe3348a696f84934190808';\r\n\r\nexport default function fetchWeather(coords) {\r\n  return fetch(`${url}&q=${coords}`)\r\n    .then(response => response.json())\r\n    \r\n}\r\n\r\n// fetchWeather('Kiev');\r\n","import './styles.css';\r\nimport fetchWeather from './fetchWeather.js';\r\nimport getGeoPosition from './getGeoPosition.js';\r\n\r\n\r\nconst serchForm = document.getElementById('search-form');\r\nserchForm.addEventListener('submit', e => {\r\n  e.preventDefault();\r\n  console.log('e.currentTarget.elements.city.value :', e.currentTarget.elements.city.value);\r\n  fetchWeather(e.currentTarget.elements.city.value)\r\n  .then(data => {\r\n    console.log('fetch', data);\r\n    render(data)\r\n  });\r\n});\r\n\r\n\r\ngetGeoPosition().then(data => {\r\n  console.log('data', data);\r\n  fetchWeather(data)\r\n  .then(data => {\r\n    console.log('fetch', data);\r\n    render(data)\r\n  });\r\n})\r\n\r\nfunction render(data) {\r\n  document.querySelector('[data-field=\"conditions\"]').textContent = data.current.condition.text;\r\n  document.querySelector('.icon').textContent = data.current.condition.icon;\r\n  document.querySelector('[data-field=\"wind\"]').textContent = `${data.current.wind_kph}kph`;\r\n  document.querySelector('[data-field=\"location\"]').textContent = data.location.name;\r\n  document.querySelector('[data-field=\"temp\"]').textContent = `${data.current.temp_c }\\u2103 `;\r\n  document.querySelector('[data-field=\"humidity\"]').textContent =`${ data.current.humidity }%`;\r\n  \r\n}","\r\n\r\n\r\nexport default function getGeoPosition() {\r\n  return showPosition().then((position) => {\r\n    let coords = `${position.coords.latitude},${position.coords.longitude}`;\r\n    return coords;\r\n  })\r\n  \r\n}\r\n\r\nfunction showPosition(position) {\r\n  if (navigator.geolocation) {\r\n    return new Promise((res, rej) => {\r\n      const options = {};\r\n      navigator.geolocation.getCurrentPosition(res, rej, options);\r\n    }) \r\n  } else {\r\n    serchForm.innerHTML = 'Geolocation is not supported by this browser.';\r\n  }\r\n  \r\n}\r\n// console.log('object');\r\n// getGeoPosition();\r\n"],"sourceRoot":""}